#!/usr/bin/env bash

set -x
set -e

# This script requires the ZETH_TOOL env var, and either
# ASSIGNMENTS_DIR, or STORE_HOST and STORE_PATH. See error messages
# below for description.
#
# For now, data is assumed to be generated with the tools in
# https://github.com/clearmatics/zeth for some values of JSIN and
# JSOUT (variables influencing the circuit size - see the zeth repo
# for details).
#
# Archives are named `zeth_assignment_<jsin>_<jsout>.tar.bz2`, and
# contain at least files:
#
#   assignment_<jsin>_<jsout>.bin
#   pk_<jsin>_<jsout>.bin OR keypair_<jsin>_<jsout>.bin

if [ "$ZETH_TOOL" == "" ] ; then
    echo "error: ZETH_TOOL must be set to point to the zeth-tool binary"
    exit 1
fi

if [ "$ASSIGNMENTS_DIR" == "" ] ; then
    if [ "$STORE_HOST" == "" ] || [ "$STORE_PATH" == "" ] ; then
        echo "error: ASSIGNMENTS_DIR must be set to the location of assignment archives, or"
        echo "       STORE_HOST and STORE_PATH must point to the location on a remote host."
        exit 1
    fi
fi

# 1 - jsin/jsout value
function setup_files() {
    # Unpack data from the archive, either from
    # ${STORE_HOST}:${STORE_PATH}, or the local ${ASSIGNMENTS_DIR}
    if ! [ -e assignment_$1_$1.bin ] ; then
        if [ "${STORE_HOST}" != "" ] ; then
	        ssh ${STORE_HOST} cat ${STORE_PATH}/zeth_assignment_$1_$1.tar.bz2 |
                tar -vxjf -
        else
            tar -vxjf ${ASSIGNMENTS_DIR}/zeth_assignment_$1_$1.tar.bz2
        fi
    fi
    if ! [ -e assignment_$1_$1.bin ] ; then
        echo no file assignment_$1_$1.bin
        exit 1
    fi

    # If necessary, extract vk from the keypair
    if ! [ -e pk_$1_$1.bin ] ; then
        ${ZETH_TOOL} split-keypair --pk-file pk_$1_$1.bin keypair_$1_$1.bin
    fi
    if ! [ -e pk_$1_$1.bin ] ; then
        echo no file pk_$1_$1.bin
        exit 1
    fi
}

# 1 - jsin/jsout value
function remove_files() {
    rm *_$1_$1.bin
}

# 1 - jsin/jsout value
# 2 - iteration
# 3 - partitions
function profile_for_partitions_iteration() {
    echo "=============================================="
    echo "  PROFILE: $1_$1  PARTITIONS: $3  ITERATION: $2"
    echo "=============================================="
    time ./scripts/run-prover --partitions $3 pk_$1_$1.bin assignment_$1_$1.bin > profile_$1_$1_$3_$2.txt 2>&1
}

# 1 - jsin/jsout value
# 2 - partitions
function profile_for_partitions() {
    echo "=============================================="
    echo "  PROFILE: $1_$1  PARTITIONS: $2"
    echo "=============================================="

    setup_files $1

    profile_for_partitions_iteration $1 1 $2
    profile_for_partitions_iteration $1 2 $2
    profile_for_partitions_iteration $1 3 $2

    remove_files $1
}

DEFAULT_JSINOUT=32

# Run for a single value of partitions, or run over all values.
if [ "" != "$1" ] ; then
    profile_for_paritions ${DEFAULT_JSINOUT} $1
else
    profile_for_partitions ${DEFAULT_JSINOUT} 8
    profile_for_partitions ${DEFAULT_JSINOUT} 16
    profile_for_partitions ${DEFAULT_JSINOUT} 32
    profile_for_partitions ${DEFAULT_JSINOUT} 64
    profile_for_partitions ${DEFAULT_JSINOUT} 128
    profile_for_partitions ${DEFAULT_JSINOUT} 256
    profile_for_partitions ${DEFAULT_JSINOUT} 512
fi
