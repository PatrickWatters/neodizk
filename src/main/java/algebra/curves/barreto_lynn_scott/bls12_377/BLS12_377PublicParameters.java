package algebra.curves.barreto_lynn_scott.bls12_377;

import algebra.curves.barreto_lynn_scott.BLSPublicParameters;
import algebra.curves.barreto_lynn_scott.bls12_377.BLS12_377Fields.BLS12_377Fq;
import algebra.curves.barreto_lynn_scott.bls12_377.BLS12_377Fields.BLS12_377Fq12;
import algebra.curves.barreto_lynn_scott.bls12_377.BLS12_377Fields.BLS12_377Fq2;
import algebra.curves.barreto_lynn_scott.bls12_377.BLS12_377Fields.BLS12_377Fq6;
import algebra.curves.barreto_lynn_scott.bls12_377.bls12_377_parameters.BLS12_377Fq2Parameters;
import java.math.BigInteger;

// Checked

public class BLS12_377PublicParameters
    extends BLSPublicParameters<BLS12_377Fq, BLS12_377Fq2, BLS12_377Fq6, BLS12_377Fq12> {

  public BLS12_377PublicParameters() {
    final BLS12_377Fq2Parameters Fq2Parameters = new BLS12_377Fq2Parameters();

    // Choice of short Weierstrass curve and its twist
    // E(Fq): y^2 = x^3 + 1
    coefficientB = new BLS12_377Fq("1");
    // We use a type-D twist here, E'(Fq2): y^2 = x^3 + 1/u
    twist = new BLS12_377Fq2(new BLS12_377Fq("0"), new BLS12_377Fq("1"));
    twistCoefficientB = twist.inverse().mul(coefficientB);
    bC0MulTwist = coefficientB.mul(new BLS12_377Fq(Fq2Parameters.nonresidue()));
    bC1MulTwist = coefficientB.mul(new BLS12_377Fq(Fq2Parameters.nonresidue()));
    qXMulTwist =
        new BLS12_377Fq2(
            new BLS12_377Fq(
                "80949648264912719408558363140637477264845294720710499478137287262712535938301461879813459410946"),
            new BLS12_377Fq("0"));
    qYMulTwist =
        new BLS12_377Fq2(
            new BLS12_377Fq(
                "216465761340224619389371505802605247630151569547285782856803747159100223055385581585702401816380679166954762214499"),
            new BLS12_377Fq("0"));

    // Pairing parameters
    // sage: u = 9586122913090633729
    // sage: ceil(log(u, 2)) # = 64
    // sage: bin(u) # = '0b1000010100001000110000000000000000000000000000000000000000000001'
    // The Hamming weight of u is: HW(u) = 7
    // u = 2**63 + 2**58 + 2**56 + 2**51 + 2**47 + 2**46 + 1
    // Based on the power-2 decomposition of u, we should have 63 doubling steps and 7 addition
    // steps in the Miller Loop.
    ateLoopCount = new BigInteger("9586122913090633729");
    isAteLoopCountNegative = false;
    finalExponent =
        new BigInteger(
            "10623521018019860488254031663707568428798032905123811199571213965079129114663661236359849629341526275899063345613340067081670062620727617884137487754739150147491204559514205186492385590272208934467461444944652711005169371168250068790820776124772095630237102189827733019989835063334551453893534663070786533932633573962932272563471643288531959637300817070265537429506484880990981069041269405383502889677357082012807298529931118124428569059822346289745077401570134157444973271520981774047146918354408632568723153146248333028827919406785654402107153546667815607201488590832478225403444136409349877481268154817904541340614173261949772403060924324366861723245182619859389254985008236007465814273361497134138868945580557938161335670207544906643574043606819537336472235809927599628123275314288006170804044560238676463931639339711913111080974582593228138704154320599775683095604041309000197025419968125718018311805959315220036948621879242495199408833915486421612374480018459896018440926235261824654956932384859260479372776022979736734221629097297890154692194441528462770218811795624471108972377573690833913231260547835550851256817740247389770320334698430697237343583761719223414894063451411431859122738488311580005412765070251810159991897110936324943232526870280724876946523218213525646968094720");
    finalExponentZ = new BigInteger("9586122913090633729");
    isFinalExponentZNegative = false;

    blsFq12Factory = BLS12_377Fq12.ONE;
  }
}
